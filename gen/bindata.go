package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _probes_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x41\x6f\xda\x40\x10\x85\xef\xfc\x8a\x11\x39\xb3\x60\x3b\x08\xd5\x2a\xed\x25\x52\xc5\x25\xaa\x9a\x03\xea\x71\x6d\x0f\xeb\x2d\xf6\x0e\xda\x1d\xd7\xe4\xdf\x57\x36\x21\x38\xd8\x8e\xa9\x13\x4e\xc8\xfb\xbe\x79\xfb\x66\x76\xf7\x0e\xb6\x18\xc1\xc1\x52\x84\xe0\x90\x59\x1b\xe5\xc4\xa4\xc4\xa8\xfe\xe4\xc2\x09\xc0\x0c\x58\x5a\x85\x1c\x42\xca\x7c\x70\xe1\x7c\x9e\xee\xff\x18\x91\xe3\x04\x00\xc0\xc8\x1c\x43\x78\x94\x7b\x4c\x36\x26\xc1\xe3\x2f\x4c\xb4\xc5\x98\xeb\xc5\x52\x1a\x0e\x61\xae\xab\x85\xd7\x0f\x8e\x25\x17\x2e\x84\x60\xe1\xbf\x57\xbd\x41\x5d\x7b\x34\x6a\x6f\x20\xd3\x7b\x04\xdc\xed\x74\xac\xd1\xc4\xcf\x2d\x1b\x7f\xb1\xe8\xb4\x29\xcb\x52\xb4\x83\x6c\x31\xfa\xa4\x18\x8d\xfa\xad\x28\x67\x97\x4f\x09\x72\x36\x49\xa4\x4b\x23\x92\x36\x69\x18\xfd\xa0\x4c\x1a\xf5\x53\xc6\x7b\xa9\xf0\x81\x62\xd7\x70\x3c\xf3\x8a\x12\x8a\x05\x59\xd5\x53\x69\x68\x0f\x2f\x59\x5d\x91\xb1\x34\xcf\xa4\xa4\x88\x29\x6f\xec\xe1\x37\x29\x79\x9d\x76\x9b\xa2\x45\xd0\x0e\x38\x45\x48\x30\x2b\x9c\x26\x03\x65\x8a\x06\xd8\x16\x9c\x56\x4b\x7b\x43\xa5\x19\xdf\x85\xef\x8a\x66\x0a\x79\xed\xf5\xb5\x63\x93\x1f\xc8\x36\x07\xfc\x35\x47\x96\xb5\x72\x3d\x55\x34\xd3\xf5\xfa\x14\x62\x32\x8c\x86\xd7\xd3\x96\x05\x28\xcd\x97\x36\x6a\x4e\x8b\xa8\xca\x5e\xef\xe5\xa2\x9a\x7e\xfb\xef\x10\xa7\xcb\x37\x3f\x5f\xc3\xfe\x28\x4f\x45\xf4\xd1\x34\x27\xaf\x77\xa3\x9c\x24\x3d\x39\x26\x77\xf0\xf0\xf8\xd4\x7a\x42\x12\xe3\xba\x9e\x90\xeb\x5b\x67\x31\x26\x9b\xd4\xa2\xea\x27\xcf\x7f\x2a\xc6\x5b\xae\xc4\x97\x85\xf0\x83\x95\xf0\x57\x6f\xfb\x35\xb2\x42\xf5\xcb\x8f\x4d\x45\x4a\x8e\x43\x90\xee\x90\x1f\x45\x26\x14\x91\xca\xb0\x0a\x2e\x5e\x35\x00\x07\x8b\xbb\x10\xbc\x36\x95\xb1\x27\x6e\x41\x97\x5d\xa8\x3f\x16\xad\x28\xff\x05\xca\xa5\xce\x7a\xb6\xbb\xe8\x26\x83\xdb\x49\xe3\x9a\x9d\x4a\x8c\xf3\x84\x45\xa5\x1d\x5b\x69\x67\x0e\xed\x5f\xb4\xee\x6d\x89\x5a\xe5\xf7\xab\x2e\x13\xec\x78\x2d\xae\x06\x39\x7a\x4e\x1d\xc1\x6f\x1d\x94\xdf\xc9\xde\x36\xa9\x2e\xb6\xc2\xee\x07\x1b\x1e\xf4\x90\xcb\xd1\xe4\xf0\xf1\xe8\x23\x87\x8f\x47\xd0\x7b\x3c\xee\x45\xf5\xda\xd4\x33\xd7\x31\x76\x1d\x0d\x6f\x50\xe1\x0f\x2a\x82\x41\xc5\xb2\x4b\xf1\x2f\x00\x00\xff\xff\x7c\x13\xe0\xce\xe9\x08\x00\x00")

func probes_yaml() ([]byte, error) {
	return bindata_read(
		_probes_yaml,
		"probes.yaml",
	)
}

var _tmpl_base_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4e\xc3\x30\x10\x86\x77\x3f\xc5\xe1\xb1\x22\x09\x6c\x48\xc4\x59\x80\x19\x24\x58\x18\xdd\xf8\xaa\x9e\x64\x9f\xa3\xf8\x9a\xaa\xb2\xfc\xee\x28\x4e\xcb\xd0\xc9\xf2\xfd\xfe\xee\xd3\xef\x9c\xbb\x1d\xec\x6d\xc2\x56\xc2\xe4\x5f\x61\x8e\x51\x40\x30\x4c\xde\x0a\xc2\xae\x2b\x45\xe5\xec\xf0\x40\x8c\xa0\xd7\x77\xba\x14\xd5\x3f\xbc\x7f\xbe\xfd\xfc\x7e\x7d\xc0\x51\x82\x1f\x54\x7f\x3b\xd0\xba\x41\xf5\x01\xc5\xc2\x78\xb4\x73\x42\x31\xfa\x24\x87\xe6\x45\x0f\xaa\x9a\xbe\x47\xeb\x11\x16\xc2\xf3\x14\x67\x01\x62\x98\x31\x45\x7f\x12\x8a\xdc\x10\x3b\x9c\x90\x1d\xb2\xc0\xd9\x5e\xda\x4d\xbf\xad\x63\x1b\xd0\xe8\x1b\xa8\x61\x8c\x2c\xc8\x62\xf4\x99\x9c\x1c\x8d\xc3\x85\x46\x6c\xea\xe5\x11\x88\x49\xc8\xfa\x26\xad\x36\xf3\xdc\x3e\x55\xfd\x7f\x2b\x9d\xc6\x99\x26\x49\xb5\x4a\x92\x8b\xc7\xbb\x78\x1d\xd5\xb0\xbb\xa6\x7d\x77\xad\xb6\x8f\xee\x32\x28\xd5\x3b\x5a\x80\x9c\xd1\xc1\x12\xdf\x2d\xaf\x23\x68\x2b\xee\x68\x59\xe1\x8d\xea\xbb\xed\x9b\x72\x46\x76\xa5\xa8\xbf\x00\x00\x00\xff\xff\xd0\x10\x5c\x52\x7b\x01\x00\x00")

func tmpl_base_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_base_tmpl,
		"tmpl/base.tmpl",
	)
}

var _tmpl_index_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x6e\xc5\x20\x0c\x45\x77\xbe\xc2\x62\x7c\x43\x50\xd6\x8a\xc7\x54\xa9\x4b\x87\x4e\xdd\x49\x71\x1f\x56\xc1\x20\x40\x6d\x25\x8b\x7f\xaf\x9a\x64\xc8\x74\x2d\xfb\xc8\xe7\x8a\x98\x1b\x10\x07\xfc\x5d\x46\xae\xe9\x09\x3a\xe5\x9a\x10\x72\x61\x1a\xa5\x11\x3f\x20\xf8\x1e\xb7\xe2\x5b\x80\x9b\x99\x53\x89\x04\xfc\x24\x46\xd0\xd9\x13\xeb\x39\x95\xb2\x71\x75\x2f\x25\x17\xb6\x26\xae\x4e\xd9\x0a\x14\xee\xfa\x1b\x5b\xa7\xc2\xda\xd9\x3e\x5a\xe1\x87\x7b\x3f\x16\x20\xb2\x9c\xe3\x9c\xd6\x9c\x47\x6b\xaa\x53\x22\x03\x73\x4d\x7e\x20\xe8\x44\xfc\xd5\x35\x2c\xaf\xff\xb9\x7b\x7f\x68\x44\x58\xde\x5a\xd9\xb0\x3d\x53\xf7\x5b\xc2\x30\xa7\x02\xb0\x71\x85\x8f\xe4\x7b\xbf\xeb\xcd\x07\xed\x0e\x04\xc2\xc9\x1c\xad\x44\x30\x75\xdc\xf9\xab\xa6\xee\xac\x3e\xff\x1e\x22\xe4\x70\xc9\xbf\x00\x00\x00\xff\xff\xad\x8e\xff\xbc\x23\x01\x00\x00")

func tmpl_index_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_index_tmpl,
		"tmpl/index.tmpl",
	)
}

var _tmpl_links_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\x41\x8a\xc3\x30\x0c\x45\xf7\x3e\x85\x30\x59\x85\x21\x26\xdb\xe0\xe8\x04\x61\x16\x03\x73\x00\x43\x94\xda\x54\x71\x4b\x5c\xd3\x85\xd0\xdd\x8b\xd3\xd2\x9d\x9e\x1e\xef\x8b\xb8\x1e\x38\xe5\x6b\x19\x1e\xfb\x9d\x27\x28\xf1\xf6\x2c\x50\x0b\x6d\x95\xdf\x02\x7a\xa7\x6a\x44\x56\xda\x52\x26\xb0\xe7\xd3\xaa\x1a\x1f\x47\x5c\x1a\x78\x17\x47\x34\xbe\x32\xa4\x75\xfe\x78\x34\x22\x47\xc8\x17\x82\x2e\xfd\x40\xc7\x30\xcd\x30\xb4\x88\x13\xfa\x00\xf1\xa0\x6d\xb6\x22\x1d\x0f\xff\x7f\x8b\xaa\xc5\xf3\xfe\x0d\x3b\xa9\x7a\x17\xd0\x3b\x4e\x6d\x83\xf2\xda\x2a\x57\x19\xcd\x17\x5f\x01\x00\x00\xff\xff\xc3\x60\x3f\xe2\xb6\x00\x00\x00")

func tmpl_links_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_links_tmpl,
		"tmpl/links.tmpl",
	)
}

var _tmpl_login_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x4d\x6f\xe3\x36\x10\x3d\x87\xbf\x62\xca\x2d\x6a\x3b\x5b\x4b\xe8\xad\x88\x2d\x15\xd9\x74\x81\x35\x50\xa0\xc1\xee\xf6\x50\x14\x85\xc1\x90\x23\x89\x09\x4d\xb2\x24\xe5\x40\x10\xf4\xdf\x0b\x52\x72\xa4\xba\xd8\xd3\xc8\x9c\x37\x6f\xde\x7c\xb9\xef\x05\x56\x52\x23\x50\xcf\x9d\xb4\xc1\xd3\x61\x20\xfb\xf1\x1b\xbc\xe3\x05\x6d\x42\xb0\xfe\x2e\xcf\x99\x95\x3e\xab\x8d\xa9\x15\x66\xdc\x9c\xf2\x67\x9f\x73\x25\x51\x87\x3b\xab\x58\xa8\x8c\x3b\x65\xcf\x9e\x02\xf3\x9d\xe6\x20\xb0\x42\x57\xee\xf3\x91\xa8\x24\x17\xca\x92\xdc\xf4\x7d\xc0\x53\x0c\x41\xa0\xcf\xff\xb4\xe8\xba\x98\x92\xdc\x9c\x99\x83\x06\x95\x45\x07\x05\xac\xab\x56\xf3\x20\x8d\x5e\x6f\xa0\x27\x00\xd1\xf9\xe1\xfe\xcb\xc7\xe3\xfd\xe3\xe1\xf8\x78\xff\xf5\x13\x14\xb0\xb2\xaa\xf5\xf9\xf9\xa7\x7c\xb5\x9b\x10\xac\x0d\xcd\x67\xf4\xad\x0a\x50\x40\xab\xc7\xca\xc4\x8e\x10\x00\x87\xa1\x75\x3a\x71\x01\xe4\xb7\xb7\xc9\xc2\x2d\x7c\x92\x02\x3d\x84\x06\xc1\xcb\x5a\x6f\xa5\x86\xa7\x36\x04\xa3\x81\x69\x01\xdc\x68\x8d\x3c\x4c\x7e\x74\x67\x74\x5b\x2f\x05\x02\xb3\x16\x58\x15\xd0\x5d\x68\x22\xa0\xf5\xe8\xc0\xb7\x9c\xa3\xf7\x55\xab\x54\x97\x28\x3d\x48\x9d\x4d\xb0\x3c\xd9\xf8\x7a\xd0\x0f\x4c\xa9\x27\xc6\x5f\xee\xe0\xad\xd4\x59\xfe\x66\x12\x0a\x20\x2b\x58\xbc\xff\xb5\x62\x89\xfe\x18\xcc\x0b\xea\xd5\xdf\x33\x0e\x20\x34\xd2\x67\xca\xd4\x87\x25\x51\xc6\x8d\xc0\xcd\x6e\x02\x0d\x80\xca\xe3\x35\x27\x45\xe7\x8c\xa3\xff\x21\xfb\x7e\xbd\x7a\x37\x43\x56\x9b\x8c\x59\x8b\x5a\xac\x57\xbf\x99\xba\x46\x01\xa6\x0d\xab\x99\x36\xd9\xe1\xc7\x64\x92\x82\x45\x51\x49\xc0\x1b\xf3\xab\xd4\xc2\xbc\x66\xca\x70\x16\xbd\x99\x43\xab\x18\xc7\xf5\x5b\xe2\x6b\x80\x71\xb2\x96\x1a\xde\x03\xcd\xa7\x69\xfc\xe2\x03\x0b\x58\x50\x78\xbf\x50\x4b\xdf\xa5\x57\xba\xc9\x9a\x70\x52\xeb\x4d\x0c\xf8\x21\xa6\x8e\x38\x58\x34\x21\x6a\x1d\x76\x64\xd8\xac\x37\x3b\x42\xc8\x45\xe6\xd5\x50\xfe\x37\x8a\x71\x31\xb3\x6f\xa3\x76\x64\x20\xf3\xba\xf7\x3d\x6a\x11\xb7\x7a\x3e\x2f\x65\x6a\xa9\xd3\x71\x7d\xf7\xeb\xef\x0f\x5f\xff\x7c\xfc\x08\x51\x6a\x49\xf6\x17\x83\x4c\x94\xe4\x66\x7f\xc2\xc0\x80\x37\xcc\x79\x0c\x05\x6d\x43\xb5\xfd\x99\x5e\x9d\xcd\xf2\x54\xf3\x31\x6e\xff\x64\x44\x97\xee\xcc\x32\x0d\x5c\x31\xef\xc1\x87\x4e\x61\x41\x85\xf4\x56\xb1\xee\x0e\xb4\xd1\x48\x41\x8a\x82\x8e\xcd\x2a\xfb\x3e\xfb\x12\xbf\xfe\xf8\x7c\x18\x86\x7d\x1e\x43\x23\x85\x90\xe7\x84\xaa\x1f\xc6\x8e\xd3\x72\xa2\x4d\xa1\xb2\xd6\x52\x7f\x48\x47\x42\x4b\x02\x90\x5c\xa9\xb7\x29\x6b\x41\xeb\xed\x88\xa1\xe9\x51\xb0\xc0\xb6\x7c\xea\xd8\x18\x3e\x77\x70\x09\x49\xff\x25\x31\x43\xdf\x67\x0f\xe9\xc7\x41\x0c\xc3\x02\x31\xae\x7e\xe8\x2c\x16\xd4\x54\x95\x92\x1a\x97\xf1\xc6\xbc\x48\xb4\x46\x49\xde\xc5\x34\xba\x56\x78\x6c\x8c\x0f\xc7\x71\x85\x16\x50\xcf\x4d\xe4\xb0\xce\x54\x52\xe1\x58\xc4\x54\xfc\x6c\x85\x3c\x47\x33\xb6\x75\x9f\x8f\x43\xba\xcc\xf5\xdf\x00\x00\x00\xff\xff\xb7\x2d\x9c\x4b\x36\x05\x00\x00")

func tmpl_login_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_login_tmpl,
		"tmpl/login.tmpl",
	)
}

var _tmpl_prober_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x6b\xdc\x30\x10\x3d\xdb\xbf\x62\x50\x7d\x68\x43\xb0\x49\x72\x5b\xb4\x82\x94\x50\x9a\x4b\x09\x69\xef\x45\xbb\x1a\xaf\x54\x6c\x49\x48\xca\x07\x08\xfd\x8a\x5e\xfb\xeb\xfa\x4b\x8a\x2c\x7b\xeb\xa4\xdb\x42\x4f\x46\xe3\x37\xef\xcd\x7b\x33\x31\x76\x67\x60\x9d\xd9\xa1\x6b\xc3\x68\x87\x0d\x78\x69\x9e\x7c\x29\x81\x43\xff\x30\x04\x0f\x67\x5d\x4a\x75\x8c\x02\x7b\xa5\x11\x48\xc1\x93\x94\x6a\x2a\x2f\xd8\xdd\x1a\x4a\x3b\x79\xc1\x6a\xca\x41\x3a\xec\xb7\xe4\x0d\x81\xfd\xc0\xbd\xdf\x92\x4c\x0b\x52\x09\x81\x9a\xb0\xcf\xf9\x61\x5f\xf6\xf1\x93\x6d\x52\x09\x24\xec\xa3\x12\x78\x0a\x2f\xd4\x23\x28\xb1\x2d\x03\x7d\x55\xba\x37\x84\xd5\x31\x3a\xae\x0f\x08\x8d\x3a\x87\xc6\xc2\x66\x0b\xed\x34\xe9\x25\xfb\xcd\x1f\x63\x63\xdb\x4f\x7c\xc4\x94\x08\x5b\x3d\x32\x2d\xed\xe4\xe5\x34\x8b\xe6\x23\x6e\xc9\x1a\x0a\x5d\xa6\x57\x3d\x34\xb6\xbd\x51\x9e\xef\x06\x14\x99\xdb\x2e\xe3\xee\xb8\x20\x6c\xf9\x43\x3b\x9b\xe1\x38\x78\x9c\x40\x45\xe8\x06\xfd\x3e\x0b\x59\x56\x53\x79\x05\x31\x3e\xa9\x20\x33\xe1\xad\xbf\x1e\xd0\x05\xa5\x0f\x29\xad\xe8\x62\x44\x2d\x52\x62\xef\xb9\xd0\xe8\xfd\x06\x26\x96\xf9\x95\x89\xe4\xd5\xca\xf3\xb7\x73\x68\x5c\xf6\xdc\xd8\xf6\x1e\xf7\xc6\x09\x0f\xd3\xee\xf2\xd0\xae\xbd\x9f\xd2\x6b\xef\xb8\xf7\x65\xf2\x9c\xe0\x2c\x56\x42\x2c\xf9\xc2\xc1\x18\x41\x58\x5d\x51\x1f\x9c\xd1\x07\x08\x2a\x0c\x25\x0c\xd7\x7e\x51\x23\xfa\xc0\x47\x9b\x12\xbc\x9d\x2a\xd7\x07\x93\xd2\x3b\xc2\x7e\xfe\xf8\x4e\xbb\xd2\xc1\x6a\xda\x09\xf5\xb8\x0e\xe0\x6f\x5a\x53\x68\xff\x2b\xf5\x7c\x4a\x28\x07\x75\xfc\xd2\x9d\x5b\xe4\x7a\xf5\xdc\x0f\x86\x87\x79\x81\x4b\xe2\x73\x40\xf9\x8b\x3a\x7c\xe0\x6a\x78\x70\xe8\xa7\x63\xb9\x62\xa5\x08\xab\xf5\x43\x3f\x23\x4a\xe6\xd5\x8b\x43\x73\xcb\xa1\x55\x7f\xfa\x9c\xfb\xb2\xc9\x2a\x53\xff\xd3\xda\x4c\x5e\x95\x7b\x39\xae\xec\x56\xf7\x66\x3e\x9b\x6a\x36\x5c\xbd\x76\xfc\xfa\xbb\x24\x73\x2c\xfc\x0a\x00\x00\xff\xff\x76\x8c\x24\x75\xee\x03\x00\x00")

func tmpl_prober_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_prober_tmpl,
		"tmpl/prober.tmpl",
	)
}

var _tmpl_scripts_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6e\xc3\x20\x10\x45\xf7\x9c\x02\xa1\x2c\x60\x33\x28\x5d\xd6\xa9\xef\xe2\xc2\x24\x1e\xd7\x06\x17\x70\x9b\x08\x71\xf7\xca\x31\x4e\xd5\xac\xba\x9b\x19\xbd\xff\xbe\x20\x67\x8b\x67\x72\xc8\x45\x34\x81\xe6\x14\x45\x29\xec\xb4\xcd\x3c\x06\xf3\x26\xfa\x94\xe6\xf8\xaa\x75\x37\x74\x57\xb8\x78\x7f\x19\xb1\x9b\x29\x82\xf1\xd3\xfd\xa6\x47\x7a\x8f\x7a\xf8\x5c\x30\xdc\xf4\x0b\x1c\xe1\x58\x17\x98\xc8\xc1\x10\x45\x7b\xd2\x9b\xaf\xdd\xc5\x2d\x3b\x2f\xce\x24\xf2\x8e\x93\xa3\x24\x15\xcf\x8c\xf3\x83\x14\xd0\x93\xb5\xe8\x84\x5a\x07\x94\xaa\xa9\xe7\xd8\xfb\x6f\xa1\xc0\x8c\x64\x3e\xe4\x9e\xad\xb1\x95\x48\x3d\xc5\x3d\x03\x0e\xaf\x49\xaa\x7b\xe6\x79\x63\x9c\x97\x87\x74\xc5\xff\x2d\x9d\x03\x7e\x3d\x34\xcd\x1f\xa2\x36\x6c\x60\x6d\x28\x8c\x1d\xa4\xf5\x66\x99\xd0\x25\x05\x01\x3b\x7b\x7b\xee\xd8\x9e\xde\xb0\x95\xff\xfd\xa2\x9c\xd1\xd9\x52\xd8\x4f\x00\x00\x00\xff\xff\x2f\x8a\xbb\x2e\x99\x01\x00\x00")

func tmpl_scripts_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_scripts_tmpl,
		"tmpl/scripts.tmpl",
	)
}

var _tmpl_style_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x6a\xc3\x30\x10\x85\xf7\x3a\xc5\x90\xd2\x4d\xa0\x4a\x52\x28\x18\x79\x9f\x6b\x14\xd9\x1a\xfd\x50\x59\x63\xa4\x09\x49\x11\xba\x7b\xa9\x12\x8a\x17\xcd\xf2\xcd\x7b\xdf\xc7\xd4\x7a\xd8\x43\xe1\xef\x88\x92\x97\x35\x8e\x30\x97\x72\xcf\xb0\x3f\xb4\x26\x6a\x35\x68\x43\x42\xd8\xf5\xe3\xae\x35\x21\x8b\xa7\x2b\x48\x1f\x0c\x42\x15\x00\x8b\xce\x2e\x24\x05\x27\x5c\x46\xd1\x84\x74\x44\xa6\x17\x93\x9e\xbf\x5c\xa6\x4b\x32\x6f\x33\x45\xca\x0a\x5e\x86\xf3\x30\x0a\x00\x8f\xc1\x79\x56\x70\x92\x1f\x0f\x68\xd2\x4f\x99\xf3\xf0\x3f\xc3\x78\x63\x9d\x51\x77\xee\x1a\x0c\x7b\x05\xc3\xf1\x75\xbb\x7d\x3f\x3e\xf4\x6b\xa6\x09\x3f\x33\x96\x4b\xe4\xed\xbe\xff\xbc\x71\xdf\xe3\xaa\x8d\x09\xc9\xfd\x65\x1b\x49\xb3\x82\x88\x96\xbb\xcd\x86\x5b\x3f\x75\xd3\x1c\x51\x67\x05\x13\xb1\xff\x2d\x6b\xc5\x64\x5a\x13\x3f\x01\x00\x00\xff\xff\xdf\x78\xd8\x43\x59\x01\x00\x00")

func tmpl_style_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_style_tmpl,
		"tmpl/style.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"probes.yaml": probes_yaml,
	"tmpl/base.tmpl": tmpl_base_tmpl,
	"tmpl/index.tmpl": tmpl_index_tmpl,
	"tmpl/links.tmpl": tmpl_links_tmpl,
	"tmpl/login.tmpl": tmpl_login_tmpl,
	"tmpl/prober.tmpl": tmpl_prober_tmpl,
	"tmpl/scripts.tmpl": tmpl_scripts_tmpl,
	"tmpl/style.tmpl": tmpl_style_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"probes.yaml": &_bintree_t{probes_yaml, map[string]*_bintree_t{
	}},
	"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
		"base.tmpl": &_bintree_t{tmpl_base_tmpl, map[string]*_bintree_t{
		}},
		"index.tmpl": &_bintree_t{tmpl_index_tmpl, map[string]*_bintree_t{
		}},
		"links.tmpl": &_bintree_t{tmpl_links_tmpl, map[string]*_bintree_t{
		}},
		"login.tmpl": &_bintree_t{tmpl_login_tmpl, map[string]*_bintree_t{
		}},
		"prober.tmpl": &_bintree_t{tmpl_prober_tmpl, map[string]*_bintree_t{
		}},
		"scripts.tmpl": &_bintree_t{tmpl_scripts_tmpl, map[string]*_bintree_t{
		}},
		"style.tmpl": &_bintree_t{tmpl_style_tmpl, map[string]*_bintree_t{
		}},
	}},
}}

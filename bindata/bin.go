package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _tmpl_base_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x50\xbd\x4e\xc3\x30\x10\xde\xf3\x14\x87\xc7\x8a\x24\xb0\x21\x11\x67\x01\x66\x90\x60\x61\x74\xe3\xab\x72\x92\x63\x47\xf1\x35\x51\x64\xf5\xdd\xb9\x38\x2d\x43\x17\x9f\x7d\xdf\x9f\x3e\xa7\x54\x1f\xe0\x68\x22\x56\x3c\x8c\xee\x15\xa6\x10\x18\x18\xe5\x6e\x18\xe1\x50\x5f\x2e\x45\x4a\x16\x4f\xe4\x11\xd4\xc6\x53\xb2\x69\x1e\xde\x3f\xdf\x7e\x7e\xbf\x3e\xa0\xe7\xc1\xb5\x45\x73\x1b\x68\xac\x8c\x01\xd9\x40\xd7\x9b\x29\x22\x6b\x75\xe6\x53\xf9\xa2\xda\x22\x27\x7d\x77\xc6\x21\xcc\x84\xcb\x18\x26\x06\xf2\x30\x61\x0c\xee\xcc\x14\x7c\x49\xde\xe2\x88\x72\x78\x86\xc5\xac\xd5\x1e\xbf\xdb\x79\x33\xa0\x56\x37\xa1\x82\x2e\x78\x16\x9e\x56\x0b\x59\xee\xb5\xc5\x99\x3a\x2c\xf3\xe3\x51\x6c\x89\xc9\xb8\x32\x6e\x69\xfa\xb9\x7a\xca\xf1\xff\xad\x54\xec\x26\x1a\x39\xe6\x2a\x91\x57\x87\x77\xf0\xb6\xca\x60\x7d\x45\x9b\xfa\x5a\xed\x18\xec\xda\x16\x45\x63\x69\x06\xb2\x5a\x0d\x86\xfc\x9d\x79\x5e\x41\x95\xe5\x42\xdb\xc4\xbb\x4a\x4c\xf2\x37\xa5\x24\x1d\x05\xfe\x0b\x00\x00\xff\xff\xd0\x10\x5c\x52\x7b\x01\x00\x00")

func tmpl_base_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_base_tmpl,
		"tmpl/base.tmpl",
	)
}

func tmpl_base_tmpl() (*asset, error) {
	bytes, err := tmpl_base_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/base.tmpl", size: 379, mode: os.FileMode(420), modTime: time.Unix(1417516804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpl_index_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\xb1\x4e\xc4\x30\x0c\x86\xf7\x3e\x85\x95\xf1\x86\x46\xac\x28\x97\x09\x89\x85\x81\x89\x3d\xc5\xe6\x6a\x91\x3a\x55\x1c\x01\x52\xd4\x77\xc7\xd7\x76\xb8\xe9\xb7\xec\x2f\xff\x97\xde\xfd\x05\x58\x90\xfe\xc6\xb6\xac\xf9\x19\x94\x2d\x08\x96\x22\xdc\x4a\x65\xb9\x01\x26\x9d\xa7\x92\x2a\xc2\xc5\x6f\xdb\xd0\x3b\xd2\x17\x0b\x81\x5b\x12\x8b\xb3\xcd\x10\xe6\xa7\xf8\x5a\xec\x49\xf0\x36\x0d\x61\x05\xc6\xab\xfb\xa1\xaa\x5c\xc4\xc5\xa0\xad\x16\xb9\xc5\x8f\x63\x01\xbd\x8f\xe7\xb8\x6d\xc1\x9f\xc7\xe0\xd7\x68\xdd\x8d\x4c\x9f\x9a\xb5\x67\x96\x6f\x75\x30\xbe\xdd\x73\xf7\xfe\x72\x9b\x61\x7c\xaf\x65\xa2\xfa\xc2\x9a\xa6\x4c\x68\x07\x00\xf3\xc3\x67\x4e\xaa\x57\x37\x25\x74\xf1\x40\x00\x4f\xe6\xf8\x55\xef\x94\x95\x76\xfe\x51\xb3\xee\xac\x3b\x7b\x0f\x11\x09\x3e\xe4\x7f\x00\x00\x00\xff\xff\xad\x8e\xff\xbc\x23\x01\x00\x00")

func tmpl_index_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_index_tmpl,
		"tmpl/index.tmpl",
	)
}

func tmpl_index_tmpl() (*asset, error) {
	bytes, err := tmpl_index_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/index.tmpl", size: 291, mode: os.FileMode(420), modTime: time.Unix(1418829064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpl_links_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x8c\x41\xca\x83\x40\x0c\x85\xf7\x9e\x22\x0c\xae\xe4\xc7\xe1\xdf\xca\x98\x13\x48\x17\x85\x1e\x60\xc0\x58\x87\xc6\x69\x71\x2a\x5d\x84\xdc\xbd\xd1\x96\xee\xde\x7b\x5f\xbe\x88\xf8\x06\x38\xe5\x5b\x69\x9f\xcb\x83\x3b\x28\xf3\xfd\x55\x60\x2b\x34\x6d\xfc\x01\xd0\x78\xd5\x4a\x64\xa4\x29\x65\x02\x77\x8c\xce\xa6\x30\xff\xe3\xb0\x97\xe0\x2d\x55\xc1\x84\x34\xf6\x5f\x8e\x66\xac\x31\x5f\x09\xea\xf4\x07\x35\x43\xd7\x43\xbb\x4b\x9c\x30\x44\x98\x57\x9a\x7a\x27\x52\x73\x7b\x39\x0f\xaa\x0e\x8f\x7c\x8a\x0b\xa9\x06\x1f\x31\x78\x3b\xb4\x1f\x94\xc7\xdd\xf2\x1b\x63\xf5\xab\xef\x00\x00\x00\xff\xff\xc3\x60\x3f\xe2\xb6\x00\x00\x00")

func tmpl_links_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_links_tmpl,
		"tmpl/links.tmpl",
	)
}

func tmpl_links_tmpl() (*asset, error) {
	bytes, err := tmpl_links_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/links.tmpl", size: 182, mode: os.FileMode(420), modTime: time.Unix(1417513372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpl_login_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x5d\x6f\xeb\x36\x0c\x7d\xae\x7f\x05\xe7\x0e\x4b\xd2\x2e\x36\xf6\x36\xe4\x6b\x68\xb3\x02\x0d\x30\x60\x45\xdb\x3d\x0c\xc3\x10\xa8\x32\xed\xa8\x55\x24\x5f\x49\x4e\x61\x18\xfe\xef\x97\x92\x9d\xc4\x37\x17\xf7\x89\x89\x78\x78\x48\x1e\x92\x6e\x9a\x0c\x73\xa1\x10\x62\xcb\x8d\x28\x9d\x8d\xdb\x36\x5a\x74\xbf\xc1\x1a\xbe\x8c\x77\xce\x95\x76\x96\xa6\xac\x14\x36\x29\xb4\x2e\x24\x26\x5c\xef\xd3\x77\x9b\x72\x29\x50\xb9\x59\x29\x99\xcb\xb5\xd9\x27\xef\x36\x06\x66\x6b\xc5\x81\x48\xd1\xac\x16\x69\x47\xb4\x8a\x8e\x94\xab\xe8\xaa\x69\x1c\xee\x7d\x08\xe5\x7c\xff\x52\xa1\xa9\x7d\xca\xe8\xea\xc0\x0c\xec\x50\x96\x68\x60\x09\xe3\xbc\x52\xdc\x09\xad\xc6\x13\x68\x22\x00\xef\xbc\xbf\x7b\x79\xd8\xde\x3d\x6d\xb6\x4f\x77\xaf\x8f\x84\x19\x95\xb2\xb2\xe9\xe1\xb7\x74\x34\xef\x11\xac\x72\xbb\x67\xb4\x95\x74\xe4\xae\x54\xd7\x59\x36\x8f\xc8\x6d\xd0\x55\x46\x05\x2e\x80\xf4\xe6\x26\x58\xb8\x81\x47\x91\xa1\x05\xb7\x43\xb0\xa2\x50\x53\xa1\xe0\xad\x72\x4e\x2b\x60\x2a\x03\xae\x95\x42\xee\x7a\x3f\x9a\x03\x9a\xa9\xa5\x00\x60\x65\x09\x2c\x77\x68\x8e\x34\x1e\x50\x11\x02\x6c\xc5\x39\x5a\x9b\x57\x52\xd6\x81\xd2\x82\x50\x49\x0f\x4b\x83\xf5\xaf\x1b\xb5\x66\x52\xbe\x31\xfe\x31\x83\x53\xab\xe7\xf2\x27\x7d\xa1\x00\x22\x87\xc1\xfb\x7f\x23\x16\xe8\xb7\x4e\x7f\xa0\x1a\xfd\x7f\xc6\x01\x95\x40\xf3\x91\xba\xd8\x0c\x89\x68\x52\x19\x4e\xe6\x3d\xa8\x05\x94\x16\x2f\x39\x63\x34\x46\x9b\xf8\x1b\xb2\x9f\xc7\xa3\xeb\x33\x64\x34\x49\xa8\x63\x54\xd9\x78\xf4\x97\x2e\x0a\xcc\x40\x57\xf4\x78\xa2\x0d\xb6\xfd\x35\x98\x50\xc1\xa0\xa9\x50\xc0\x89\xf9\x53\xa8\x4c\x7f\x52\x99\x9c\x79\x6f\x62\x90\x36\x81\xe3\xf8\x94\xf8\x12\xa0\x8d\x28\x68\x28\xb7\x10\xa7\xfd\x34\xfe\xb0\x8e\x76\x67\x19\xc3\xed\xa0\xda\xf8\x3a\xbc\xc6\x93\x64\xe7\xf6\x92\x96\x86\x02\x7e\xf1\xa9\x3d\x0e\x06\x22\xf8\x5a\xdb\x79\xd4\x4e\xc6\xf4\x10\x45\xc7\x32\x2f\x86\xf2\xdd\x28\xba\xc5\x4c\x7e\x8c\x22\xca\xe8\xbc\xee\x4d\x43\x62\xf9\xad\x3e\x9f\x17\xe9\x22\x54\x38\xae\x9f\xfe\xfc\x7b\xfd\xfa\xef\xd3\x03\xf8\x52\x57\xd1\xe2\x68\x90\x65\x74\x1e\x8b\x3d\x3a\x06\x7c\xc7\x8c\x45\xb7\x8c\x2b\x97\x4f\x7f\x8f\x2f\xce\x66\x78\xaa\x69\x17\xb7\x78\xd3\x59\x1d\xee\xac\x64\x0a\xb8\x64\xd6\x82\x75\xb5\x24\x01\x32\x61\x29\xae\x9e\x81\xd2\x0a\x63\x10\xd9\x32\xee\xc4\x5a\x35\x4d\xf2\xe2\x7f\xfd\xf3\xbc\x69\x5b\xaa\x9e\x42\x3d\x45\x26\x0e\x01\x55\xac\x3b\xc5\x29\x7d\x47\x1b\x42\x49\x02\xa1\xee\xc3\x91\x90\x03\x20\xb8\x82\xb6\x21\x2b\x85\x4d\x3b\x4c\x1c\x1e\x33\xe6\xd8\x94\xf7\x8a\x75\xe1\x67\x05\x87\x90\xf0\x2d\xf1\x19\xa8\xaa\x75\xf8\xb3\x21\x09\x07\x88\x6e\xf5\x5d\x5d\x52\x4f\x3a\xcf\x25\xc9\x3a\x8c\xd7\xfa\x43\x60\xa9\xa5\xe0\xb5\x4f\xa3\xe8\x3b\xb5\xdd\x69\xeb\xb6\xdd\x0a\x0d\xa0\x96\x6b\xcf\x51\x1a\x9d\x0b\x89\x5d\x13\x7d\xf3\x67\x4b\x22\x78\xd3\xc9\x4a\x2a\x87\x21\x1d\xe7\xfa\x35\x00\x00\xff\xff\xb7\x2d\x9c\x4b\x36\x05\x00\x00")

func tmpl_login_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_login_tmpl,
		"tmpl/login.tmpl",
	)
}

func tmpl_login_tmpl() (*asset, error) {
	bytes, err := tmpl_login_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/login.tmpl", size: 1334, mode: os.FileMode(420), modTime: time.Unix(1418827277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpl_prober_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\xcd\x6e\xd4\x30\x10\x3e\xef\x3e\xc5\xc8\xec\x01\x2a\x94\x88\xee\x6d\x95\x58\x2a\xaa\x10\x27\x54\x01\x77\xe4\x5d\x4f\x12\x23\xc7\x8e\x6c\x97\x56\x8a\xfc\x14\x5c\x79\x3a\x9e\x84\x71\x9c\x94\x2c\x2c\x48\xbd\xc4\xf2\x64\xe6\xfb\xf3\x8c\x63\x79\x05\x83\xb3\x47\x74\x45\xe8\x07\x7d\x00\xdf\xd9\x07\x9f\x4b\xe0\xd0\xdf\xeb\xe0\xe1\xaa\x8c\x71\x3b\x8e\x12\x1b\x65\x10\x58\xee\x67\x54\xab\xba\x37\xfc\x6e\xdd\x5a\x95\x54\xd9\x56\x02\x3a\x87\x4d\xcd\x5e\x30\x38\x69\xe1\x7d\xcd\x12\x2c\x74\x4a\x4a\x34\x8c\x7f\x4a\x97\xe1\x7c\x4e\x5c\x1c\xa3\x09\x64\xfc\x3d\x7d\x2f\xf5\x4b\xf5\x0d\x94\xac\xb3\xa0\x2f\xca\x34\x96\x71\xd2\xe9\x84\x69\x11\x76\xea\x35\xec\x06\x38\xd4\x50\x4c\x4a\xaf\xf9\x6f\xfc\x71\xdc\x0d\xc5\x07\xd1\x63\x8c\x8c\xaf\x2e\x09\x96\x2c\x5c\x4f\x5a\x0c\x95\x6a\xb6\x6e\x85\x32\xc1\xab\x86\x70\x8b\x5b\xe5\xc5\x51\xa3\x4c\xd8\xc3\x22\xf7\x28\x24\xe3\xcb\x9f\xaa\x1c\x52\x3b\x6a\x8f\x53\x53\x26\xba\x45\x7f\x4a\x44\xf4\xaf\xea\xf6\x30\x8e\x0f\x2a\x74\x09\xf0\x46\xa3\x0b\xca\xb4\x31\xae\xc0\x68\xdc\x10\x05\x7f\x2b\xa4\x41\xef\x0f\x30\x61\xcc\xb7\x04\xd3\xed\x57\x8e\xbf\x92\x63\x97\x1c\x53\xcf\x47\x3c\x59\x27\x3d\x4c\x2f\x97\x24\xbb\xe2\x8e\x60\xb3\xe0\x14\xdc\xcc\x92\xb3\xcb\xb1\x42\x6b\x2d\x19\xd8\x6e\x2a\x1f\x9c\x35\x2d\x04\x15\x74\xce\xc0\x15\x9f\x55\x8f\x3e\x88\x7e\x88\x11\x5e\x4e\x95\x9b\xd6\xc6\xf8\x8a\xf1\x9f\x3f\xbe\x57\x65\x9e\x20\x53\x25\x81\xaf\x7d\xff\x8b\x6b\xca\xea\xb9\x54\x8f\x97\x88\x52\x42\x4f\x67\x75\x74\x0b\x5d\xa3\x1e\x1b\x6d\x45\x98\xdf\x6d\x09\x7a\x4e\x26\x9d\x68\xc2\x3b\xa1\xf4\x3d\x49\x9a\x76\x64\xcf\x73\x11\x56\xaf\x0e\xcd\xdc\x91\xc3\x06\x38\x5b\x30\xb7\x2c\x18\xc0\xdf\x4e\xe7\x49\x96\xa6\x36\x09\xfd\xbf\xee\x16\xfc\x4d\x5e\x15\x47\xab\x12\x08\xc0\xcf\xdb\x42\x04\xd9\x71\x52\x70\xee\xf9\xcf\x73\xc9\xe6\xa9\xf0\x2b\x00\x00\xff\xff\xc2\x32\x66\x6f\xe7\x03\x00\x00")

func tmpl_prober_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_prober_tmpl,
		"tmpl/prober.tmpl",
	)
}

func tmpl_prober_tmpl() (*asset, error) {
	bytes, err := tmpl_prober_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/prober.tmpl", size: 999, mode: os.FileMode(420), modTime: time.Unix(1418826749, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpl_scripts_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xc1\x6e\xc3\x20\x0c\x86\xcf\xe3\x29\x10\xea\x81\x5c\x40\xdd\x71\xed\xf2\x2e\x19\xb8\x8d\xb3\x04\x32\x4c\xb6\x56\x28\xef\x3e\xd2\x90\x4e\xeb\xa9\x07\x24\xdb\xfa\xfe\xcf\x02\x52\xb2\x70\x42\x07\x5c\x90\x09\x38\x46\x12\xf3\xcc\x8e\x6b\xcd\x29\x98\x77\xd1\xc6\x38\xd2\x9b\xd6\x4d\xd7\x5c\xd4\xd9\xfb\x73\x0f\xcd\x88\xa4\x8c\x1f\x6e\x33\xdd\xe3\x07\xe9\xee\x6b\x82\x70\xd5\xaf\x6a\xaf\xf6\xa5\x51\x03\x3a\xd5\x91\xa8\x8f\x7a\xf5\xd5\x9b\xb8\x66\x2f\xa7\xc9\x99\x88\xde\x71\x74\x18\x65\xc5\x13\xe3\x7c\x27\x85\x6a\xd1\x5a\x70\xa2\x5a\x0a\x90\xd5\xa1\x8c\xa9\xf5\x3f\x79\x68\x7a\x34\x9f\x72\xcb\x96\xd8\x42\xc4\x16\x69\xcb\x28\x07\x97\xac\xbc\x65\x1e\xbb\x8c\xcf\x77\xe9\x82\x3f\x2d\x1d\x03\x7c\xdf\x35\x87\x7f\x44\xd9\xb0\x82\x65\xc3\xcc\xd8\x4e\x5a\x6f\xa6\x01\x5c\xac\x54\x80\xc6\x5e\x1f\x77\xac\x57\xcf\x6c\x3e\x7f\x6f\x94\x12\x38\x9b\x3f\x81\xfd\x06\x00\x00\xff\xff\x0d\x3f\xa1\x51\x9b\x01\x00\x00")

func tmpl_scripts_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_scripts_tmpl,
		"tmpl/scripts.tmpl",
	)
}

func tmpl_scripts_tmpl() (*asset, error) {
	bytes, err := tmpl_scripts_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/scripts.tmpl", size: 411, mode: os.FileMode(420), modTime: time.Unix(1417801542, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpl_style_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x41\x6a\xc3\x30\x10\x45\xf7\x3e\xc5\x90\xd2\x4d\xa0\x4e\x5a\x28\x18\x7b\x9f\x6b\x94\xb1\x67\x2c\x89\xca\x1a\x23\x4d\x48\x8a\xc8\xdd\xab\x2a\xa1\x78\xd1\x2e\xff\x7f\x7a\x9f\x41\x39\x1f\xf6\x90\xf4\xcb\x73\xab\xcb\xea\x07\x98\x52\xba\x67\xd8\x1f\x6e\xb7\x26\x67\xe2\xd9\x05\x86\x5d\x2d\x77\xa5\x6a\x93\x95\x0b\xb4\xd6\x11\x43\x6e\x00\x16\x8c\xc6\x85\x1e\x5e\x79\x19\x9a\x82\x8d\x08\x55\x30\xe2\xf4\x69\xa2\x9c\x03\xbd\x4c\xe2\x25\xf6\xf0\xd4\x9d\xba\xa1\x10\xcb\xce\x58\x2d\x4a\xfb\xfe\x90\x46\xfc\xd7\x39\x75\x7f\x3b\xca\x57\xc5\xc8\x58\xbd\x8b\x23\xb5\x3d\x74\xc7\xe7\xed\xdb\xb7\xe3\x63\x7e\x8d\x32\xf2\x47\xe4\x74\xf6\xba\x7d\x5f\x6f\xde\x6c\xdf\xe3\x8a\x44\x2e\x98\xdf\x3c\x7b\xc1\x42\x3d\xcf\x5a\xd7\x66\x77\xad\x55\x5d\x9a\x3c\x63\x39\x73\x14\xb5\x3f\x30\x67\x0e\x54\x7e\xe9\x3b\x00\x00\xff\xff\xdf\x78\xd8\x43\x59\x01\x00\x00")

func tmpl_style_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_style_tmpl,
		"tmpl/style.tmpl",
	)
}

func tmpl_style_tmpl() (*asset, error) {
	bytes, err := tmpl_style_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/style.tmpl", size: 345, mode: os.FileMode(420), modTime: time.Unix(1417861860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/base.tmpl":    tmpl_base_tmpl,
	"tmpl/index.tmpl":   tmpl_index_tmpl,
	"tmpl/links.tmpl":   tmpl_links_tmpl,
	"tmpl/login.tmpl":   tmpl_login_tmpl,
	"tmpl/prober.tmpl":  tmpl_prober_tmpl,
	"tmpl/scripts.tmpl": tmpl_scripts_tmpl,
	"tmpl/style.tmpl":   tmpl_style_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
		"base.tmpl":    &_bintree_t{tmpl_base_tmpl, map[string]*_bintree_t{}},
		"index.tmpl":   &_bintree_t{tmpl_index_tmpl, map[string]*_bintree_t{}},
		"links.tmpl":   &_bintree_t{tmpl_links_tmpl, map[string]*_bintree_t{}},
		"login.tmpl":   &_bintree_t{tmpl_login_tmpl, map[string]*_bintree_t{}},
		"prober.tmpl":  &_bintree_t{tmpl_prober_tmpl, map[string]*_bintree_t{}},
		"scripts.tmpl": &_bintree_t{tmpl_scripts_tmpl, map[string]*_bintree_t{}},
		"style.tmpl":   &_bintree_t{tmpl_style_tmpl, map[string]*_bintree_t{}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
